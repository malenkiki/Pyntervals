#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#import time
import optparse
#import httplib2
import urllib2
#import re
import base64
import json

class Pyntervals:
    '''
    Todo: put this class into other file… here only for some development speed starting
    Todo: have un config ini file for token as alternate touse param to get it
    '''
    VERSION = '0.1'
    actions_allowed = [
            'client', 
            'contactdescriptor', 
            'contacttype',
            'customer',
            'document',
            'group',
            'me', 
            'milestone', 
            'milestonenote',
            'module',
            'person',
            'personcontact', 
            'project',
            'projectmodule',
            'projectnote',
            'projectworktype', 
            'request', 
            'settings',
            'task', 
            'tasklistfilter', 
            'tasknote', 
            'taskpriority', 
            'taskstatus', 
            'time',
            'timer',
            'worktype'
            ]

    def __init__(self, token):
        '''
        Constructor must have token string… because without it, we do nothing.
        '''
        self.token    = token
        self.password = 'X'
        self.top_url  = 'https://api.myintervals.com/'
        self.use_python() # by default


    def use_python(self):
        self.use_json()
        self.python = True

    def login(self):
        base64_string = base64.encodestring('%s:%s' % (self.token, self.password))[:-1]
        self.request.add_header("Authorization", "Basic %s" % base64_string)

    def use_json(self):
        self.json   = True
        self.xml    = False
        self.python = False

    def use_xml(self):
        self.json   = False
        self.xml    = True
        self.python = False

    def export_format(self):
        export_string = 'json'

        if self.xml:
            export_string = 'xml'
        
        return export_string

    def set_accept_json_or_xml(self):
        header_string = 'json'

        if self.xml:
            header_string = 'xml'
        
        self.request.add_header("Accept", "application/" + header_string);

    def set_content_type_json_or_xml(self):
        header_string = 'json'

        if self.xml:
            header_string = 'xml'
        
        self.request.add_header("Content-type", "application/json")

    def am_i_administrator(self):
        return self.get_me()[u'group'] == 'Administrator'

    def action_exists(self, action):
        '''
        Check if given action exist into API
        '''
        return action in Pyntervals.actions_allowed
   

    def get_client(self):
        self.get_action('client')
        return json.loads(self.last_response)[u'client']

    def get_me(self):
        self.get_action('me')

        if self.python:
            return json.loads(self.last_response)[u'me'].pop()
        else:
            return self.last_response

    def get_person(self, id = None):
        self.get_action('person')
        return json.loads(self.last_response)[u'person']

    def get_timer(self):
        self.get_action('timer')
        return json.loads(self.last_response)[u'timer']

    def get_time(self):
        self.get_action('time')
        return json.loads(self.last_response)[u'time']

    def get_action(self, string_action):
        self.request = urllib2.Request(self.top_url + string_action)
        self.set_accept_json_or_xml()
        self.login()
        self.run()

    def get_action_by_id(self, string_action, id):
        self.get_action(string_action + '/' + id + '/')

    def action(self, string_action, method):
        self.request = urllib2.Request(self.top_url + string_action)
        self.set_accept_json_or_xml()
        
        if method.lower() in ['post', 'put']:
            self.set_content_type_json_or_xml()

        self.login()

    def put_action(self, string_action):
        '''
        TODO
        '''
        self.action(string_action, 'put')

    def post_action(self, string_action):
        '''
        TODO
        '''
        self.action(string_action, 'post')

    def delete_action(self, string_action, id):
        '''
        TODO
        '''

    def run(self):
        try:
            handle = urllib2.urlopen(self.request)
            self.last_response = handle.read()
        except IOError, e:
            print "It looks like the token is wrong."
            #sys.exit(1)


def main():
    parser = optparse.OptionParser(version="%prog " + Pyntervals.VERSION)
    parser.add_option("-t", "--token", dest="token", help=u"Token you must get from http://xx.timetask.com/account/api in order to use this tool.", metavar="STRING")
    parser.add_option("--id", dest='id', help=u"Use given ID for some actions to have specific one intead of several of them", metavar='INTEGER')
    parser.add_option("--me", action='store_true', dest='me', help=u"Get informations about… me, hum, no, you sorry… but you it is me here… well, you understand what I mean :)")
    parser.add_option("--xml", action='store_true', dest='xml', help=u"Returns response as XML. If not given, JSON is used.")
    (options, args) = parser.parse_args()

    if options.token:
        p = Pyntervals(options.token)

        if options.xml:
            p.use_xml()
        else:
            p.use_json()

        if options.me:
            print p.get_me()
        



if __name__ == "__main__":
    main()
