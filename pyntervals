#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import optparse
import pyntervalslib
import sys
#import urllib2
from pyntervalslib.pyntervals import Pyntervals
from pyntervalslib.collection import Collection
from pyntervalslib.version import APP_VERSION


def main():
    parser = optparse.OptionParser(version="%prog " + APP_VERSION)
    parser.add_option("-t", "--token", dest="token", help=u"Token you must get from http://xx.timetask.com/account/api in order to use this tool.", metavar="STRING")
    parser.add_option("--id", dest='id', help=u"Use given ID for some actions to have specific one intead of several of them", metavar='INTEGER')
    parser.add_option('-a', "--action", action='store', dest='action', help=u"Action to do with API. Valid actions are: " + ', '.join(Pyntervals.actions_allowed), metavar='STRING')
    parser.add_option('-f', "--filter", dest='filters', action='append', help=u"Set one filter. Call it for each filter you want use.", metavar='STRING')
    parser.add_option("--offset", dest='offset', help=u"Give an offset for returned list", metavar='INTEGER')
    parser.add_option("--limit", dest='limit', help=u"Give a limit for returned list", metavar='INTEGER')
    parser.add_option("--search", dest='search', help=u"Returns list that follow the given pattern", metavar='STRING')
    parser.add_option("--report-time", dest='report_time', help=u"Export time as CSV file. If you are admin, returns times for all members, if not, returns only yours. By default, outputs previous month, but you can choose date range by using filters.", metavar='FILE')
    parser.add_option('-F', "--csv-fields", dest='csv_fields', action='append', help=u"If export as CSV is selected, this option allow you give what field to display in sort you want.", metavar='STRING')
    parser.add_option("--csv", dest='csv', help=u"Export given action as CSV if it is a collection.", metavar='FILE')
    parser.add_option("--list-actions", action='store_true', dest='list_actions', help=u"Print list of available actions.")
    parser.add_option("-x", "--xml", action='store_true', dest='xml', help=u"Returns response as XML. If not given, JSON is used.")
    (options, args) = parser.parse_args()


        

    if options.list_actions:
        print "\n".join(Pyntervals.actions_allowed)

    if options.token:
        try:
            p = Pyntervals(options.token)
        except AttributeError, e:
            print "It looks like the token is wrong."
            sys.exit(1)
        except Exception, e:
            print "It looks like the token is wrong."
            sys.exit(1)

        if options.filters:
            col = Collection(options.action)
            for i in options.filters:
                key_value = i.split('=')
                if len(key_value) == 2:
                    col.add_filter(key_value[0], key_value[1])
                else:
                    print "A filter must match key=value pattern!"
                    sys.exit(1)
            p.set_query_string(col.build_query_string())

        if options.report_time:
            import HTMLParser

            h = HTMLParser.HTMLParser()
            
            if Pyntervals.action_exists(options.action):
                list_action = p.get_action(options.action, options.id)

            if len(list_action) > 0:
                allowed_fields = ['date','time','description','billable','client','project','module','worktype','firstname','lastname']
                import csv
                output_file  = open(options.report_time, "wb")
                writer = csv.writer(output_file, delimiter=';', quotechar='"', quoting=csv.QUOTE_ALL)
                for item in list_action:
                    row = []
                    for k in allowed_fields:
                        if k == 'date':
                            row.append(item[k])
                            list_date = item[k].rsplit('/')
                            for idx in range(3):
                                row.append(list_date[idx])
                            continue
                        if k == 'billable':
                            if item[k] == 'f':
                                row.append('no')
                                continue
                            else:
                                row.append('yes')
                                continue
                        row.append(h.unescape(item[k]).encode('utf-8'))
                    row.append(h.unescape(item['lastname'] + ' ' + item['firstname']).encode('utf-8'))
                    writer.writerow(row)
                output_file.close()
            sys.exit(0)

        if options.xml:
            p.use_xml()
        else:
            p.use_json()

        if Pyntervals.action_exists(options.action):
            print p.get_action(options.action, options.id)
        else:
            print 'You must give an existing action from the followings: ' + ', '.join(Pyntervals.actions_allowed)
            sys.exit(1)




if __name__ == "__main__":
    main()
